   <FlatList
      data={DATA}
      keyExtractor={item => item.id}
      renderItem={({item}) => <Cards title={item.title}/>}
      ItemSeparatorComponent={Separator}/>
    </View>

                     <View style={styles.textContainer}>
        <TouchableOpacity onPress={() => console.log('forgot username pressed')}>
        <Text style={styles.text}>Forgot username</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => console.log('forgot password pressed')}>
        <Text style={styles.text}>Forgot password</Text>
        </TouchableOpacity>
    </View>



      useEffect(() => {
    fetchMessageHistory();
  }, [])


  const fetchMessageHistory = async () => {
    try {
      const response = await axios.get('http://192.168.86.41:3000/message-history');
      setMessages(response.data.messages);
    } catch (error) {
      console.error('Error fetching message history:', error);
    }
  };


  const onSend = async (newMessages = []) => {
    try {
      // Send new message to backend
      const response = await axios.post('http://192.168.86.41:3000/send-message', {
        message: newMessages[0],
      });
      // Update local message state with the new message
      setMessages((prevMessages) => GiftedChat.append(prevMessages, response.data.message));
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };


   const io = new Server();
        io.on('connection', (socket) => {
        console.log(' Socket server Client connected');
        // Handle incoming messages
        socket.on('message', (message) => {
            console.log('Received message:', message);
            // Broadcast the message to all connected clients
            io.emit('message', message);
        });
        // Handle disconnections
        socket.on('disconnect', () => {
            console.log(' Socket Client disconnected');
        });
        });


          <ListItem
          title={item.userName}
          subTitle={item.description}
          image={item.image}
          onPress={() => navigation.navigate('Chat',{userName: item.userName})}
          renderRightActions={() => 
          <ListItemDelete onPress={ () => handleDelete(item)}/>}
          renderLeftActions={() => (
            <TouchableOpacity onPress={() => console.log('archived pressed')}>   
              <View
            style={{
              width:70,
              backgroundColor:'blue',
              height:'100%',
              justifyContent:'center',
              alignItems:'center'
            }}
            ><Text style={styles.text}>Archive</Text></View></TouchableOpacity>
       
          )}
        />


        onPress={() => navigation.navigate('Chat',{userName: item.userName})}

         <View style={styles.screen}>
          <GiftedChat
    messages={messages}
    onSend={messages => onSend(messages)}
    user={{
      _id: 1,
    }}
    textInputStyle={styles.text}
    alwaysShowSend
    renderSend={renderSend}
    scrollToBottom
    isTyping={true}
  />
      </View>
  
      socket.on('message',(newMessage) => {
        setMessages((previousMessages) => {
        GiftedChat.append(previousMessages,newMessage)
      })})
    }catch(error){
      console.error(`${error}`)
    }
  }

  const onSend = useCallback((messages = []) => {
    setMessages(previousMessages =>
      GiftedChat.append(previousMessages, messages),
    )

    const newMessage = messages[0]

    sendMessgae(newMessage)
  }, [])


  const sendMessgae = async (newMessage) => {
    try{
      const response = await axios.post('http://localhost:3000/send-message' ,{
        message: newMessage,
        name: route.params.userName})
      console.log('Message sent:', response.data)
    }catch(error){
      console.error(`${error}`)
    }
  }



  const renderSend = (props) => {
    return (
      <Send
      {...props}
      >
        <View>
          <MaterialCommunityIcons
          style={{ marginBottom:10, marginRight:10}}
          name='send-circle'
          size={32}
          color='#2e64e5'/>
        </View>
      </Send>
    )
  }

    const [messages, setMessages] = useState([])
  const [allChatMessage, setAllChatMessage] = useState([])

  // useEffect(() => {
  //   setMessages([
  //     {
  //       _id: 1,
  //       text: 'Hello developer',
  //       createdAt: new Date(),
  //       user: {
  //         _id: 2,
  //         name: 'React Native',
  //         avatar: 'https://placeimg.com/140/140/any',
  //       },
  //     },
  //   ])
  // }, [])

  useEffect(() => {
    clientSide();
  },[])

 


  const clientSide = () => {// creating client connection
    try{


            // socket.on('userId',(userid)=> {
            //     SocketMap[userid] = socket
            // })
          
            // socket.on('message',async (data) => {

            //     // try{
            //     //     const {senderUserId, receipentUserID, message} = data;

            //     //     await MessageCollection.insertOne({senderUserId,receipentUserID,message});
            //     //     const recipentSocket = SocketMap[receipentUserID];
            //     //     if(receipentUserID){
            //     //         recipentSocket.emit('newMessage',{senderUserId,message})
            //     //     }
            //     // }catch(error){
            //     //     console.error(`${error}`)
            //     // }
            
                
            // })
            // Handle disconnections
            // socket.on('disconnect', () => {
            //     console.log(' Socket Client disconnected');
            // });


// login screen
import { SafeAreaView, View, StyleSheet,Text, Image, ActivityIndicator,Alert} from 'react-native'
import AppTextInput from '../components/AppTextInput'
import color from '../../config/color'
import Button from '../components/Button'
import { useState } from 'react'
import * as Yup from 'yup';
import { Formik} from 'formik';
import axios from 'axios'
//import {AsyncStorage} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';


const LoginScreen = ({navigation}) => {
    const [isLoading, setLoading] = useState(false)
    
    
    const LoginPress = async (values,{resetForm}) => {
        setLoading(true); // Set loading to true when login button is pressed
        try{
            const res = await axios.post('http://192.168.86.48:5050/login',{
                username:values.username,
                password:values.password
            })
            if(res.status === 200){
                   // Simulate login process with setTimeout
                   const authToken = res.data.token
                   console.log(authToken)
                   AsyncStorage.setItem('my-key', authToken)
                   .then(() => {
                    setTimeout(() => {
                        setLoading(false); // Set loading to false after some time (simulating successful login)
                        resetForm({values:initialValues});
                        navigation.navigate('Homepage');
                        Alert.alert('Success!!', 'you have logged in!');
                    }, 2000); 
                   })
            }

        }catch(error){
            if(error.res && error.res.status === 401){
                console.error('Unauthorized username and password ')
                Alert.alert('Login failed','Invalid username or password')
            }else{
                console.error(`Login failed: ${error}`)
                Alert.alert('Login failed','Error occurred!')
            }
           
        }
    }
    const RegisterPress = () => {
        navigation.navigate('Register')
    }
    const validationSchema = Yup.object().shape({
        username: Yup.string()
        .min(8)
        .max(10)
        .required('Username is required'),
        password: Yup.string()
        .min(8, 'Password must contain at least 8 characters')
        .max(50)
        .required('Password is required')
        .matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/),
      });

      const initialValues = {
            username:'',
            password:''
        }
      


  return (
   
    <SafeAreaView style={styles.container}>
        <View>
            <Image
            style={styles.logo}
            source={require('../assets/applogo.png')}
            />
            </View>
            <Formik
            initialValues={initialValues}
            onSubmit={LoginPress}
            validationSchema={validationSchema}
            >
            {({handleSubmit,handleChange,values, errors,touched, setFieldTouched}) => (
                    <>
                    <View style={styles.UserContainer}>
                    <AppTextInput
                    icon='account' 
                    placeholder='User Name' 
                    backgroundColor={color.light}
                    onChangeText={handleChange('username')}
                    values={values.username}
                    onBlur={() => setFieldTouched('username')}/>
                    {
                        touched.username && errors.username && (
                            <Text style={styles.errormessage}>{errors.username}</Text>
                        )
                    }
                    <AppTextInput
                    icon='lock'
                    secureTextEntry
                    placeholder='Password'
                    backgroundColor={color.light}
                    onChangeText={handleChange('password')}
                    values={values.password}
                    onBlur={() => setFieldTouched('password')}/>
                    { touched.password && errors.password && (
                        <Text style={styles.errormessage}>{errors.password}</Text>
                    )}
                    </View>
                    <View style={styles.LoginContainer}>
                        {isLoading ? ( 
                        <ActivityIndicator size='large' color={color.white} />) : (
                        <Button onPress={handleSubmit} title='Login' backgroundColor={color.light} color={color.AppBackgroundColor}/>
                        )
                        }
                        <View style={styles.textContainer}>
                            <Text style={styles.text}>
                                Don't have an account?
                            </Text>
                            <Text onPress={RegisterPress} style={styles.text1}>Sign Up</Text>
                        </View>
                        </View> 
                    </>
            )}
            </Formik>
         
    </SafeAreaView>
  
  )
}


// register screen

import React, {useState} from 'react'
import {SafeAreaView, View, Text,StyleSheet,Platform,StatusBar, TouchableOpacity} from 'react-native';
import { Formik, Field, Form } from 'formik';
import AppTextInput from '../components/AppTextInput';
import color from '../../config/color';
import Button from '../components/Button';
import * as Yup from 'yup';
// import axios from 'axios';
import { FIREBASE_AUTH } from '../../FireBase/FireBaseConfig';





const RegisterScreen = ({navigation}) => {
    const handleRegister = async (values, {resetForm} )=> {

        try{
            const res = await axios.post('http://localhost:3000/register', {
                name: values.name,
                username: values.username,
                email:values.email,
                password :values.password
             })
             console.log(res.data)
             resetForm({values:initialValues})
             navigation.navigate('Login')
        }catch(error){
            console.error(error)
        }
    }    

    const validationSchema = Yup.object().shape({
        name: Yup.string()
        .min(3, 'Too Short')
        .max(50, 'Too long')
        .required('Please enter your full name'),
        username: Yup.string()
        .min(8)
        .max(10)
        .required('Username is required'),
        email: Yup.string()
        .email('Invalid email')
        .required('Please enter your email'),
        password: Yup.string()
        .min(8, 'Password must contain at least 8 characters')
        .max(50)
        .required('Please enter your password')
        .matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/),
        confirmPassword: Yup.string()
        .oneOf([Yup.ref('password'), null], 'Passwords must match')
        .required('Please enter password again'),
      });

    const initialValues = {
        name:'',
        username:'',
        email:'', 
        password:'', 
        confirmPassword:''}

    return (
        <SafeAreaView style={styles.screen}>
            <View style={styles.container}>
                <View style={styles.headingcontainer}>
                    <Text style={styles.heading}>Register</Text>
                    <Text style={styles.bottomText}>Create a new account</Text>
                </View>
                <Formik
                   initialValues={initialValues}
                    onSubmit={handleRegister}
                    validationSchema={validationSchema}
                >
                    {({handleChange, handleSubmit, values, setFieldTouched,touched, errors, isValid}) => (
                        <>
                            <View>
                            <AppTextInput
                                    icon='account'
                                    placeholder='Full Name'
                                    backgroundColor={color.light}
                                    value={values.name}
                                    onChangeText={handleChange('name')}
                                    onBlur={() => setFieldTouched('name')}
                                />
                                {touched.name && errors.name && (
                                <Text style={styles.errormessage}>{errors.name}</Text>)}
                                <AppTextInput
                                    icon='account'
                                    placeholder='Username'
                                    backgroundColor={color.light}
                                    value={values.username}
                                    onChangeText={handleChange('username')}
                                    onBlur={() => setFieldTouched('username')}
                                />
                                {touched.username && errors.username &&( <Text style={styles.errormessage}>{errors.username}</Text>)}
                                <AppTextInput
                                    icon='email'
                                    keyboardType='email-address'
                                    placeholder='Email'
                                    backgroundColor={color.light}
                                    value={values.email}
                                    onChangeText={handleChange('email')}
                                    onBlur={() => setFieldTouched('email')}
                                />
                                {touched.email && errors.email && (<Text style={styles.errormessage}>{errors.email}</Text>)}
                                <AppTextInput
                                    icon='lock'
                                    secureTextEntry
                                    placeholder='Password'
                                    backgroundColor={color.light}
                                    value={values.password}
                                    onChangeText={handleChange('password')}
                                    onBlur={() => setFieldTouched('password')}
                                />
                                {touched.password && errors.password  && (<Text style={styles.errormessage}>{errors.password}</Text>)}
                                <AppTextInput
                                    icon='lock'
                                    secureTextEntry
                                    placeholder='Confirm Password'
                                    backgroundColor={color.light}
                                    value={values.confirmPassword}
                                    onChangeText={handleChange('confirmPassword')}
                                    onBlur={() => setFieldTouched('confirmPassword')}
                                />
                                {touched.confirmPassword && errors.confirmPassword &&( <Text style={styles.errormessage}>{errors.confirmPassword}</Text>)}
                            </View>
                            <View style={styles.buttoncontainer}>
                                <Button title='Register' 
                                disabled={!isValid}
                                onPress={handleSubmit} 
                                backgroundColor={isValid ? "#395B64" : '#A5C9CA'} 
                                color={color.white} />
                            </View>
                            <View style={styles.textContainer}>
                                <TouchableOpacity onPress={() => console.log('forgot username pressed')}>
                                    <Text style={styles.text}>Forgot username</Text>
                                </TouchableOpacity>
                                <TouchableOpacity onPress={() => console.log('forgot password pressed')}>
                                    <Text style={styles.text}>Forgot password</Text>
                                </TouchableOpacity>
                            </View>
                        </>
                    )}
                </Formik>
            </View>
        </SafeAreaView>
    )
}



const styles = StyleSheet.create({

    buttoncontainer:{
        padding:20
    },
    container:{
        padding:20
    },
    errormessage:{
        color: color.danger,
        textAlign:'center'
    },
    screen:{
        paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
        backgroundColor:color.TextbackgroundColor,
        flex:1

    },
    heading:{
        fontSize:25,
        textAlign:'center',
        color:color.AppBackgroundColor,
        fontWeight:'bold'

    },
    bottomText:{
        textAlign:'center',
        marginTop:20,
        fontSize:15,
        color:color.AppBackgroundColor
    },
    headingcontainer:{
        marginVertical:10,
    },
    textContainer:{
        marginTop:15,
        flexDirection:'row',
        justifyContent:'space-evenly'
    },
    text:{
        color:color.AppBackgroundColor,
        textAlign:'center',
        fontSize: 12,
        fontWeight:'bold'
    },
    text1:{
        color:color.AppBackgroundColor,
        fontSize: 12,
        fontWeight:'bold',
        marginLeft:10
    },
})
export default RegisterScreen



whitesheet:{
  width:'100%',
  height:'75%',
  posoition:'absolute',
  bottom:0,
  backgroundColor:'#fff',
  borderTopLEftRadius: 60
},
backImage:{
  width: '100%',
  height: 340
  posoition:absolute,
  top:0,
  resizedMode: 'cover'
}

<Formik
            initialValues={initialValues}
            onSubmit={LoginPress}
            validationSchema={validationSchema}
            >
            {({handleSubmit,handleChange,values, errors,touched, setFieldTouched}) => (
                    <>
                    <View style={styles.UserContainer}>
                    <AppTextInput
                    keyboardTYpe='email-address'
                    icon='account' 
                    placeholder='email' 
                    backgroundColor={color.light}
                    onChangeText={handleChange('email')}
                    values={values.username}
                    onBlur={() => setFieldTouched('email')}/>
                    {
                        touched.username && errors.username && (
                            <Text style={styles.errormessage}>{errors.username}</Text>
                        )
                    }
                    <AppTextInput
                    icon='lock'
                    secureTextEntry
                    placeholder='Password'
                    backgroundColor={color.light}
                    onChangeText={handleChange('password')}
                    values={values.password}
                    onBlur={() => setFieldTouched('password')}/>
                    { touched.password && errors.password && (
                        <Text style={styles.errormessage}>{errors.password}</Text>
                    )}
                    </View>
                    <View style={styles.LoginContainer}>
                        {isLoading ? ( 
                        <ActivityIndicator size='large' color={color.white} />) : (
                        <Button onPress={handleSubmit} title='Login' backgroundColor={color.light} color={color.AppBackgroundColor}/>
                        )
                        }
                        <View style={styles.textContainer}>
                            <Text style={styles.text}>
                                Don't have an account?
                            </Text>
                            <Text onPress={RegisterPress} style={styles.text1}>Sign Up</Text>
                        </View>
                        </View> 
                    </>
            )}
            </Formik>


               <FlatList
      data={users}
      keyExtractor={(item) => Math.random()}
      renderItem={({ item }) => <ChatRoom item={item} onPress={() => navigation.navigate('Chat',{user: item.currentGroupName, userid: item.id})}/>}// Make sure ListitemSeparator is defined or import correctly
      /> 
      ) : null

      <NewMessageModal
      route={route}
      modalVisible={modalVisible}
       setModalVisible={setModalVisible} 
       currentGroupName={currentGroupName} 
       setCurrentGroupName={setCurrentGroupName}
       />


  // useEffect(() => {
  //   fetchChatrooms();
    
  // },[])

  
  //const firestore = getFirestore(firebase);

  // const auth = getAuth(FIREBASE_DB)


  // const fetchChatrooms = async () => {
  //   try{
      
  //       const chatroomsref = collection(db,'Chatroom')
  //       const snapshot = await getDoc(chatroomsref);
      
  //       const chatRoomData = [];
  //       snapshot.forEach((doc) => {
  //         chatRoomData.push({ id: doc.id, ...doc.data() });
  //       });
  //       setChatRooms(chatRoomData);
    
  //   } catch (error) {
  //     console.error('Error fetching chat rooms:', error);
  //   }
  // };
  
  // const newGroupName = async () => {
  //   try {
      
  //       const chatRoomsRef = collection(db,'Chatroom');
  //       const docRef = await setDoc(doc(chatRoomsRef),{
  //         groupName: currentGroupName,
  //         // Add any additional fields you want to store for the chat room
  //       });
  //       console.log('Chat room created with ID:', docRef.id);
  //       setModalVisible(false);
  //       setCurrentGroupName('');
  //       // After creating the chat room, you might want to fetch the updated list of chat rooms
  //       // You can call fetchChatRooms() here again if necessary
     
    
  //   } catch (error) {
  //     console.error('Error creating chat room:', error);
  //     Alert.alert('Error', 'Failed to create chat room. Please try again.');
  //   }
  // };


import {View, Text, StyleSheet,TouchableOpacity, Platform, StatusBar, SafeAreaView, FlatList}  from 'react-native'
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import color from'../../config/color';
import React, { useState, useCallback, useEffect, useLayoutEffect} from 'react'
import { GiftedChat, Send } from 'react-native-gifted-chat'
import { db } from '../../FireBase/FireBaseConfig';
import { collection, doc, addDoc,getDocs,query,where,onSnapshot,orderBy} from "firebase/firestore"; 
import { FIREBASE_APP } from '../../FireBase/FireBaseConfig';
import { getAuth,onAuthStateChanged } from 'firebase/auth';
const auth = getAuth(FIREBASE_APP);

const ChatScreen = ({item, route}) => {

  const [messages, setMessages] = useState([]);


  useLayoutEffect(() => {
    const col = collection(db,'chats')
    const q = query(col, orderBy('createdAt','desc'))


    const unsub = onSnapshot(q, snapshot => {
      console.log('snapshot')
      setMessages(
        snapshot.docs.map(doc =>({
          _id: doc.id,
          createdAt: doc.data().createdAt,
          text: doc.data().text,
          user:doc.data().user

        }))
      )
    })
    return () => unsub();
  },[])

  const onSend = useCallback((messages = []) => {
    setMessages(previousMessages =>
      GiftedChat.append(previousMessages, messages),
    )

    const {_id, createdAt, text, user} = messages[0]
    addDoc(collection(db,'chats'),{
      _id,
      createdAt,
      text,
      user
    })
  })

  const renderSend = (props) => {
    return (
      <Send
      {...props}
      >
        <View>
          <MaterialCommunityIcons
          style={{ marginBottom:10, marginRight:10}}
          name='send-circle'
          size={32}
          color='#2e64e5'/>
        </View>
      </Send>
    )}

  return (
    <View style={styles.screen}>
      <GiftedChat
          messages={messages}
          onSend={messages => onSend(messages)}
          user={{
          _id: auth?.currentUser.email,
          }}
          textInputStyle={styles.text}
          alwaysShowSend
          renderSend={renderSend}
          scrollToBottom
          isTyping={true}
          />
    </View>

 
  )




}



  // const handleDelete = (selectedMessage) => {

  // const newMessages = messages.filter((m) => m.id !== selectedMessage.id);
    
  //   setMessages(newMessages);
  // };


  <TouchableOpacity onPress={handlePress}>
            <MaterialCommunityIcons name="menu" color={color.white} size={30} />
          </TouchableOpacity>
        <View style={styles.test}>
        <Text style={styles.title}>DEVGUIDE</Text>
        </View>
        <View style={styles.messageContainer}>
          <TouchableOpacity onPress={hadnleMessage}>
          <MaterialCommunityIcons name="android-messages" color={color.white} size={30} />
          </TouchableOpacity>
        </View>



            <Formik
                   initialValues={initialValues}
                    onSubmit={handleRegister}
                    validationSchema={validationSchema}
                >
                    {({handleChange, handleSubmit, values, setFieldTouched,touched, errors, isValid}) => (
                        <>
                            <View>
                            <AppTextInput
                                    icon='account'
                                    placeholder='Username'
                                    backgroundColor={color.light}
                                    value={values.username}
                                    onChangeText={handleChange('username')}
                                    onBlur={() => setFieldTouched('username')}
                                />
                                {touched.username && errors.username &&( <Text style={styles.errormessage}>{errors.username}</Text>)}
                                <AppTextInput
                                    icon='email'
                                    keyboardType='email-address'
                                    placeholder='Email'
                                    backgroundColor={color.light}
                                    value={values.email}
                                    onChangeText={handleChange('email')}
                                    onBlur={() => setFieldTouched('email')}
                                />
                                {touched.email && errors.email && (<Text style={styles.errormessage}>{errors.email}</Text>)}
                                <AppTextInput
                                    icon='lock'
                                    secureTextEntry
                                    placeholder='Password'
                                    backgroundColor={color.light}
                                    value={values.password}
                                    onChangeText={handleChange('password')}
                                    onBlur={() => setFieldTouched('password')}
                                />
                                {touched.password && errors.password  && (<Text style={styles.errormessage}>{errors.password}</Text>)}
                                <AppTextInput
                                    icon='lock'
                                    secureTextEntry
                                    placeholder='Confirm Password'
                                    backgroundColor={color.light}
                                    value={values.confirmPassword}
                                    onChangeText={handleChange('confirmPassword')}
                                    onBlur={() => setFieldTouched('confirmPassword')}
                                />
                                {touched.confirmPassword && errors.confirmPassword &&( <Text style={styles.errormessage}>{errors.confirmPassword}</Text>)}
                            </View>
                            <View style={styles.buttoncontainer}>
                                {
                                    loading ? (
                                        <ActivityIndicator size='large' color={color.white} />) 
                                    :(  <Button title='Register' 
                                    disabled={!isValid}
                                    onPress={handleSubmit} 
                                    backgroundColor={isValid ? "#395B64" : '#A5C9CA'} 
                                    color={color.white} />)
                                }
                              
                            </View>
                            <View style={styles.textContainer}>
                                    <Text style={styles.text}>Have an account?</Text>
                                <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                                    <Text style={styles.text1}>Login</Text>
                                </TouchableOpacity>
                            </View>
                        </>
                    )}
                </Formik>
   <View style={styles.headingcontainer}>
                    <Text style={styles.heading}>Register</Text>
                    <Text style={styles.bottomText}>Create a new account</Text>
                </View>


                   <View style={styles.bodyContainer}>
    <Text style={styles.bodyText}>Welcome to DevGuide the 
    Ultimate source to connect new developers to the software world!</Text>
    <View style={{height:10}}></View>
    <Text style={styles.bodyText}>
      Here you are able to connect and work with other like-minded developers, from all different skills. Connect, meet and code!!!
    </Text>
   </View>


   import { useAuth } from '../authContext';


   {fontSize:hp(3)}]

     try {
   
        const docRef = doc(db, 'post', user.userId)
        const postmessagRef = collection(docRef, 'post-messages')
        const q = query(postmessagRef,orderBy('createdAt', 'desc'));
        const querySnapShot = await getDocs(q);
        let data = [];
        querySnapShot.forEach(doc => {
          data.push({ ...doc.data(),id:doc.id });
        })
        setPost([...data]);
      }  catch (e) {
      console.log(`Error: ${e}`);
    }
  };

    try {
   
      const q = query(collection(db, 'post'), orderBy('createdAt', 'desc'));
      const querySnapShot = await getDocs(q);
      let data = [];
      querySnapShot.forEach(doc => {
        data.push({ ...doc.data(),id:doc.id });
      })
    
      setPost((prev) => [...prev,...data]);
    }  catch (e) {
    console.log(`Error: ${e}`);
  }
};

 <ImageBackground 
        source={require('../assets/splashpage.png')}  // Correct asset loading
        style={styles.image}
        resizeMode="cover"
      >
        {/* Optional content here */}
      </ImageBackground>

        <Image
        source={require('../assets/splashpage.png')}
        style={styles.image}
        resizeMode='cover'
        />


<View style={{padding:40}}>
            <Text>Name</Text>
            <AppTextInput
            icon='lock'
            placeholder='Name'
            borderColor={focus === 'name' ? '#00BF63' : '#8a8a8a'}
            backgroundColor="#252525"
            onChangeText={(text) => setName(text)}
            onFocus={() => setFocus('name')}
            values={name}
            />
            <Text>Username</Text>
            <AppTextInput
             icon='lock'
             placeholder='Username'
             borderColor={focus === 'username' ? '#00BF63' : '#8a8a8a'}
             backgroundColor="#252525"
             onChangeText={text => setUsername(text)}
             values={username}
             onFocus={() => setFocus('username')}/>
            <Text>Password</Text>
            <AppTextInput
             icon='lock'
             placeholder='Password'
             borderColor={focus === 'password' ? '#00BF63' : '#8a8a8a'}
             backgroundColor="#252525"
             onChangeText={(text)=>setPassword(text)}
             values={password}
             onFocus={() => setFocus('password')}/>
            <Text>Job Title</Text>
            <AppTextInput
             icon='lock'
             placeholder='Job Title'
             borderColor={focus === 'jobtitle' ? '#00BF63' : '#8a8a8a'}
             backgroundColor="#252525"
             onChangeText={(text)=>setJobTitle (text)}
             values={jobtitle}
             onFocus={() => setFocus('jobtitle')}/>
            <View style={{padding:40}}>
            <TouchableOpacity onPress={handleSubmit}>
            <Button
            title={isloading ? 'Submitting...' : 'Submit'}
            />
            </TouchableOpacity>
            </View>            
        </View>

View style={{ marginTop: 30, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
                <View style={{ backgroundColor: '#3b3b3b', borderRadius: 5, width: 30, padding: 5 }}>
                    <View style={{ alignItems: 'center' }}>
                    <Ionicons name="person" size={15} color="#ffffff" />
                        </View>
                        </View>
                <View style={{ paddingLeft: 10, flex: 1 }}>
                <Text style={{ fontSize: 18,color:'#fff' }}>@{item.name}</Text>
                <View style={{ marginTop: 3 }}>
                <Text style={{ fontSize: 12,color:'#fff' }}>Username</Text>
                </View>
                </View>
                <View style={{ backgroundColor: '#3b3b3b', borderRadius: 5, width: 30, padding: 5 }}>
                <View style={{ alignItems: 'center' }}>
                <FontAwesome6 name="greater-than" size={15} color="#ffffff"/>
                </View>
                </View>
                </View>

              
  {items.map(({id,icon,nav})=>{
                <View key={id} style={{ marginTop: 30, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
                <View style={{ backgroundColor: '#3b3b3b', borderRadius: 5, width: 30, padding: 5 }}>
                    <View style={{ alignItems: 'center' }}>
                    <MaterialIcons name={icon} size={15} color="#ffffff" />
                        </View>
                        </View>
                <View style={{ paddingLeft: 10, flex: 1 }}>
                <Text style={{ fontSize: 18,color:'#fff' }}>@{name}</Text>
                <View style={{ marginTop: 3 }}>
                <Text style={{ fontSize: 12,color:'#fff' }}>Username</Text>
                </View>
                </View>
                <View style={{ backgroundColor: '#3b3b3b', borderRadius: 5, width: 30, padding: 5 }}>
                <View style={{ alignItems: 'center' }}>
                <MaterialIcons name={nav} size={15} color="#ffffff"/>
                </View>
                </View>
                </View>
                
              })}


      <View>
                  <ScrollView
                   style={{ flex: 1 }}
                   horizontal={true}
                   showsHorizontalScrollIndicator={false}
                   onScroll={(event) => {
                    handleScroll(event)
                   }}
                   scrollEventThrottle={16}
                   pagingEnabled={true}
                  >
                     <View style={{width,height,paddingRight:10}}>
                      <View style={{paddingLeft:85,justifyContent:'center',alignItems:'flex-start'}}>
                      <View style={{marginTop:5,borderWidth:1,borderColor:'#000',width:50,borderColor:'#00BF63'}}></View>
                      </View>
                      {skills.map((skill,index) => {
                        return <Suspense key={index} fallback={<ActivityIndicator size='small' color='#000'/>}>
                          <View style={{padding:10,paddingRight:20}}>
                          <PostComponent/>
                        </View>
                          </Suspense>
                      })}
                     </View>
                <View style={{width,height}}>
                      <View style={{paddingRight:120,justifyContent:'center',alignItems:'flex-end'}}>
                      <View style={{marginTop:5,borderWidth:1,borderColor:'#000',width:50,borderColor:'#00BF63'}}></View>
                      </View>
                      <View style={{padding:10,paddingRight:50}}>
                      <FlatGrid
                        itemDimension={150}
                        data={skills}
                        renderItem={({ item }) => 
                          ( 
                          <View style={{backgroundColor:'#252525',padding:30,borderRadius:25,}}>
                            <Text style={{textAlign:'center'}}>{item}</Text>
                            </View>
                        )}
                        />
                      </View>
               </View>
                  </ScrollView>
                </View>


                   <ChatRoom
     User={currentUser}
     onPress={() => navigation.navigate('Chat',{item})}
     next_item={item}
    />}

    <View style={styles.container}>
                <TouchableOpacity onPress={handleCancel}>
                    <View style={styles.cancelContainer}>
                    <Text style={styles.text}>Cancel</Text>
                    </View>
                </TouchableOpacity>
                <TouchableOpacity onPress={handlePost}>
                    <View style={styles.postContainer}>
                      {loading ? 
                        <ActivityIndicator  size='small' color='#fff'/>
                        :<Text style={styles.text}>Post</Text> }
                    </View>
                </TouchableOpacity>
            </View>
            <View style={{flex:2,paddingLeft:22}}>
            <Image
                source={user?.profileImage || person}
                placeholder={{blurhash}}
                style={{height:hp(4.3), aspectRatio:1, borderRadius:100}}
                transition={500}
                />
            </View>
            <View style={{borderWidth:4,borderColor:'red'}}>
            <TextInput
              style={{borderWidth:4,borderColor:'red'}}
                value={text}
                onChangeText={setText}
                numberOfLines={10}
                multiline={true}
                placeholder='Enter a post......'
                placeholderTextColor='#ffffff'
                />
          </View>




            {/* <FlatGrid
                        itemDimension={150}
                        data={skills}
                        renderItem={({ item }) => 
                          ( 
                          <View style={{backgroundColor:'#252525',padding:30,borderRadius:25,}}>
                            <Text style={{textAlign:'center'}}>{item}</Text>
                            </View>
                        )}
                        /> */}
 "plugins": [
      ["onesignal-expo-plugin",
      {
        "mode": "development"
      }
    ]
    ]

return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );

    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.

    async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! 📬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: {
      type: SchedulableTriggerInputTypes.TIME_INTERVAL,
      seconds: 2,
    },
  });
}


// async function sendPushNotification(expoPushToken) {
//   const message = {
//     to: expoPushToken,
//     sound: 'default',
//     title: 'Original Title',
//     body: 'And here is the body!',
//     data: { someData: 'goes here' },
//   };

//   await fetch('https://exp.host/--/api/v2/push/send', {
//     method: 'POST',
//     headers: {
//       Accept: 'application/json',
//       'Accept-encoding': 'gzip, deflate',
//       'Content-Type': 'application/json',
//     },
//     body: JSON.stringify(message),
//   });
// }